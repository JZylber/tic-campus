---
interface Props {
  title: string;
  xModel: string;
  options: Array<{
    value: any;
    label: string;
  }>;
  className?: string;
}

const { title, xModel, options, className } = Astro.props;
---

<div
  x-data={`{options: ${JSON.stringify(options)}}`}
  class={`flex flex-col items-center md:items-start gap-2 ${className}`}
  x-init={`if(options.length > 0)${xModel} = options[0].value`}
>
  <label
    class="text-center md:text-left text-sh-dark-gray text-[16px] font-semibold"
    x-text={`'${title}'`}></label>
  <div class="relative w-full max-w-[200px] h-[44px]">
    <div
      x-data="{ open: false }"
      @click.stop="open = !open"
      @click.outside="open = false"
      class="absolute bg-gray-50 overflow-hidden w-full flex flex-col rounded-xl text-sh-dark-gray text-[16px] border-2 border-sh-gray cursor-pointer"
    >
      <div class="p-2 flex justify-between items-center gap-x-6">
        <span x-text={xModel}></span>
        <span
          class="material-symbols-outlined text-[24px] transition-transform"
          :class=`{
          'rotate-180': open,
          'rotate-90': !open}`
        >
          keyboard_arrow_up
        </span>
      </div>
      <div
        x-show="open"
        x-collapse
        class="border-t-2 border-sh-gray divide-y-2 divide-gray-300"
      >
        <template x-for="option in options">
          <div class="p-2 hover:bg-gray-300" @click=`${xModel} = option.value`>
            <span x-text="option.label"></span>
          </div>
        </template>
      </div>
    </div>
  </div>
</div>
