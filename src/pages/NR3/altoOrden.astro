---
export const partial = true;
import { Prism } from '@astrojs/prism';
---

<p>
  ¿Qué son las funciones de alto orden? Las funciones de alto orden son
  <strong>funciones que toman a otras funciones de parámetro</strong>. Osea,
  funciones de funciones. Veamos un ejemplo:
</p>
<!-- prettier-ignore -->
<pre>
  <Prism lang="js" code={`
        function suma(a, b) {
          return a + b;
        }
        function resta(a, b) {
          return a - b;
        }
        function operacion(a, b, fn) {
          return fn(a, b);
        }
        console.log(operacion(5, 3, suma)); // 8
        console.log(operacion(5, 3, resta)); // 2`} /> 
</pre>
<p>
  En este ejemplo, la función
  <code class="language-javascript">operacion</code> es la función de alto
  orden, y el parámetro fn es el parámetro función. Fijese como aprovecho el
  hecho que es una función para llamarla con los parámetros a y b. En el caso de
  llamar a <code class="language-javascript">operacion</code> con
  <code class="language-javascript">suma</code>, los números suman, mientras que
  al llamarla con <code class="language-javascript">resta</code>, los números
  restan.
</p>
<p>
  Si lo piensan, ¡ya conocen un montón!
  <code class="language-javascript">addEventListener</code>,
  <code class="language-javascript">onEvent</code>,
  <code class="language-javascript">port.on</code> y
  <code class="language-javascript">forEach</code> son todas funciones de alto
  orden, ¡Toman otras funciones de parámetros!.
</p>
<h2>Antes de seguir...</h2>
<p>
  Lo siguiente que vamos a hacer es ver funciones de alto orden relacionadas a
  <strong>ciclos/iteraciones</strong>. Entre las 3, se pueden resolver casi
  todos los problemas que involucran ciclos.
</p>
<p>
  Y ustedes dirán:
  <em
    >Shulian, ¿OTRA FORMA de hacer ciclos? Ya vimos como 20... while, for,
    forEach</em
  >. Y yo les que digo <em>sí</em>, pero cada vez es mejor: a medida que tenemos
  programas más complejos, <strong>abstraer</strong> los ciclos nos permite
  escribir código más breve, más claro y más fácil de mantener. Además, es menos
  propenso a errores.
</p>
<p>
  Para explicar voy a dar ejemplos, que van a ser todos sobre el siguiente array
  de estudiantes (<code class="language-typescript"
    >{nombre: string, apellido: string, año: number, edad: number}</code
  >):
</p>
<!-- prettier-ignore -->
<pre>
  
  <code class="language-javascript">
        let estudiantes = [
          { nombre: "Ivo", apellido: "Degange", edad: 15, año: 3 },
          { nombre: "Carolina", apellido: "Kupcevich", edad: 16, año: 4 },
          { nombre: "Lucía", apellido: "Parrondo", edad: 15, año: 3 },
          { nombre: "Paula", apellido: "Sapochnik", edad: 18, año: 5 },
          { nombre: "Darío", apellido: "Mischener", edad: 16, año: 4 },
          { nombre: "Julián", apellido: "Zylber", edad: 17, año: 5 },
        ];
        </code></pre>
<p>
  Además, vamos a hablar todo el tiempo de dos funciones: la función de alto
  orden, y la función que toma de parámetro. En el caso del ejemplo anterior,
  <code class="language-javascript">operacion</code> era la función de alto
  orden, y la función parámetro era <code class="language-javascript">fn</code>.
  Para no volverme loco y que sea hiper confuso que esté todo el tiempo hablando
  de dos funciones, a esta segunda función parámetro (<em>fn</em>) la voy a
  empezar a llamar <strong>callback</strong>. Ahora si, sigamos.
</p>
<h2>Map</h2>
<p>
  La función <code class="language-javascript">map</code> es una función que
  dado un array y un callback, y devuelve un nuevo array con los elementos
  resultantes de llamar a callback con cada elemento del array. Dicho callback
  debe recibir un parámetro que va a ser cada elemento del array.
</p>
<p>
  Veamos el siguiente ejemplo. Dada la lista de estudiantes que di en la sección
  anterior, ¿Cómo hacemos para quedarnos sólo con los nombres? Bueno, podríamos
  hacer un ciclo que recorra el array y vaya agregando los nombres a un nuevo
  array. Algo así:
</p>
<!-- prettier-ignore -->
<pre><code class="language-javascript">
      let nombres = [];
      for (let i = 0; i < estudiantes.length; i++) {
        nombres.push(estudiantes[i].nombre);
      }
      // nombres = ["Ivo", "Carolina", "Lucía", "Paula", "Darío", "Julián"]
      </code></pre>
<p>
  Este es un claro caso para poder usar map, ya que tengo que hacer la misma
  operación en todos elementos. Usando map, el ciclo queda:
</p>
<!-- prettier-ignore -->
<pre><code class="language-javascript">
      let nombres = estudiantes.map((estudiante) => {return estudiante.nombre});
      // nombres = ["Ivo", "Carolina", "Lucía", "Paula", "Darío", "Julián"]
      </code></pre>
<p>
  En este caso, el callback toma a un estudiante y devuelve su nombre. Entonces,
  resumiendo:
</p>
<ul>
  <li>
    Map sirve para cuando quiero hacer alguna operación sobre cada elemento de
    un array.
  </li>
  <li>
    Map toma como parámetro a un callback que toma un elemento del array y
    devuelve un nuevo elemento que va a ocupar esa misma posición en el array
    nuevo.
  </li>
  <li>
    El resultado de map es el producto de ejecutar el callback con cada elemento
    del array y devolver el array de resultados. Este array es de la
    <strong>misma longitud</strong> que el original.
  </li>
</ul>
<h3>Ejercicio: César II</h3>
<p>
  ¿Se acuerdan del cifrado césar? Pueden googlearlo nuevamente. Implementar,
  usando <code class="language-javascript">map</code>, la función
  <code class="language-typescript">cifrar(palabra:string,clave:number)</code>
  que dada una palabra string y una clave numérica, devuelve la palabra cifrada
  usando César.
  <strong
    >Pueden usar la solución que les di en clase como punto de partida.</strong
  >
  Algunos tips:
</p>
<ul>
  <li>
    Para convertir un palabra a una lista de letras pueden usar
    <code class="language-javascript">split</code>.
  </li>
  <li>
    Para convertir una lista de letras a una palabra pueden usar
    <code class="language-javascript">join</code>.
  </li>
</ul>
<h2>Filter</h2>
<p>
  La función filter es la que tiene el nombre más intuitivo: filtra un array.
  Toma un callback, que toma un elemento, y devuelve
  <code class="language-javascript">true</code> si quiero que ese elemento esté
  en el array resultante, y <code class="language-javascript">false</code> si
  no. Es decir, filter ejecuta el callback sobre cada elemento del array, y si
  el callback devuelve true, ese elemento va a estar en el array final.
</p>
<p>
  Veamos un ejemplo. Si quiero de la lista de estudiantes quedarme con los de
  tercero, puedo armar el siguiente programa:
</p>
<!-- prettier-ignore -->
<pre><code class="language-javascript">
      let tercero = [];
      for (let i = 0; i < estudiantes.length; i++) {
        if (estudiantes[i].año === 3) {
          tercero.push(estudiantes[i]);
        }
      }
      // tercero = [{ nombre: "Ivo", apellido: "Degange", edad: 15, año: 3 }, { nombre: "Lucía", apellido: "Parrondo", edad: 15, año: 3 }]
    </codecode></pre>
<p>Usando filter, el ciclo queda:</p>
<!-- prettier-ignore -->
<pre><code class="language-javascript">
      let tercero = estudiantes.filter((estudiante) => {return estudiante.año === 3});
      // tercero = [{ nombre: "Ivo", apellido: "Degange", edad: 15, año: 3 }, { nombre: "Lucía", apellido: "Parrondo", edad: 15, año: 3 }]
      </code></pre>
<p>¡Una belleza! Resumiendo:</p>
<ul>
  <li>
    Filter sirve cuando quiero quedarme con alguna parte de un array basado en
    alguna condición.
  </li>
  <li>
    El callback toma un elemento del array y devuelve
    <code class="language-javascript">true</code> o
    <code class="language-javascript">false</code> dependiendo si el elemento
    debe o no aparecer en el array filtrado.
  </li>
  <li>
    El resultado de filter es un nuevo array con el mismo tipo de elementos del
    array original, pero solo aquellos que al pasarselos al callback devuelvan
    <code class="language-javascript">true</code>.
  </li>
</ul>
<h3>Ejercicio: Pokédex II</h3>
<p>
  Rehacer el mensaje <em>pokemon</em> de Pokédex usando
  <code class="language-javascript">filter</code>.
</p>
<h2>Reduce</h2>
<p>
  La función <code class="language-javascript">reduce</code> es la más
  <em>picante</em> de las 3, pero no por eso menos poderosa. Esta nos sirve para
  <strong>reducir un array a un único valor</strong>. Antes de explicarla, voy a
  partir de un ejemplo:
</p>
<p>
  Supongamos que quiero el promedio de edad de todos los estudiantes. Esto es
  reducir el array a un único valor ya que necesito la suma de todas las edades
  para luego dividir por la longitud del array. En código:
</p>
<!-- prettier-ignore -->
<pre><code class="language-javascript">
      let sumaEdades = 0;
      for (let i = 0; i < estudiantes.length; i++) {
        sumaEdades += estudiantes[i].edad;
      }
      let promedio = sumaEdades / estudiantes.length;
      // promedio = 16.166..
      </code></pre>
<p>Ahora, usando <em>reduce</em>:</p>
<!-- prettier-ignore -->
<pre><code class="language-javascript">
      let suma = estudiantes.reduce((acumulador, estudiante) => {return acumulador + estudiante.edad}, 0);
      let promedio = suma / estudiantes.length;
      // promedio = 16.166..
      </code></pre>
<p>¿Eh? ¿Que es esa magia? Vayamos paso a paso...</p>
<ul>
  <li>
    La función reduce toma <strong>2 parámetros</strong>: un callback y un valor
    inicial del acumulador.
  </li>
  <li>
    El <strong>callback</strong>, a su vez, toma dos parámetros. El acumulador
    producto de procesar el elemento anterior (o el valor inicial si es el
    primero) y el elemento.
  </li>
  <li>
    El <strong>callback</strong> retorna el valor del acumulador a ser enviado
    al siguiente elemento.
  </li>
  <li>
    Reduce entonces, se puede pensar de la siguiente forma:
    <ol>
      <li>Toma el valor inicial del acumulador</li>
      <li>
        Ejecuta el callback pasandole este valor inicial y el primer elemento
        del array.
      </li>
      <li>
        Se queda con lo que retorna este llamado al callback, y llama nuevamente
        al callback, pasándole el valor de retorno del item anterior y el
        segundo elemento del array.
      </li>
      <li>Repite este proceso hasta recorrer todo el array.</li>
    </ol>
  </li>
  <li>
    Reduce retorna el resultado del acumulador luego de recorrer todo el array.
  </li>
</ul>
<p>
  Uff esta era difícil. Pero le aseguro que es una herramienta poderosísima que
  nos ayuda a abstraernos de recorrer arrays.
</p>
<h3>Ejercicio: Vacas II</h3>
<p>Usando el dataset de vacas:</p>
<ol>
  <li>
    Con <code class="language-javascript">filter</code>, quedarse con todos los
    datos del año 2013.
  </li>
  <li>
    Aplicando <code class="language-javascript">reduce</code> al resultado del
    filtro, contar todas las vacas que había ese año.
  </li>
</ol>
<p>
  ¿Se animan a hacer algo más complejo? En vez de devolver la cantidad de vacas
  del año 2013, usar
  <code class="language-javascript">reduce</code> para armar un objeto que
  guarde la cantidad de vacas por año. Es decir, el objeto debería tener la
  forma
  <code class="language-typescript">{2008: number, 2009: number, ...}</code>.
  <strong>TIP:</strong> piensen el tipo y valor inicial del acumulador...
</p>
<h2>Encadenamiento de funciones</h2>
<p>
  La sintaxis (como se escribe el código) de las funciones de alto orden nos
  permite hacer algo muy copado: encadenar las funciones. Como muchas pueden
  devolver arrays, puedo llamar una inmediatamente al terminar la otra, sin
  pasar por variables intermedias.
</p>
<p>
  Supongamos el siguiente ejemplo. Quiero quedarme con el nombre más largo (en
  cantidad de letras) de los estudiantes de 3ero. Usando nuestros viejos modos:
</p>
<!-- prettier-ignore -->
<pre><code class="language-javascript">
        // Estudiantes de 3ero
        let tercero = [];
        for (let i = 0; i < estudiantes.length; i++) {
          if (estudiantes[i].año === 3) {
            tercero.push(estudiantes[i]);
          }
        }
        // Nombres
        let nombres = [];
        for (let i = 0; i < tercero.length; i++) {
          nombres.push(tercero[i].nombre);
        }
        // Nombre más largo
        let nombreMásLargo = "";
        for (let i = 0; i < nombres.length; i++) {
          if (nombres[i].length > nombreMásLargo.length) {
            nombreMásLargo = nombres[i];
          }
        }
        console.log(nombreMásLargo);// "Lucía"
      </code></pre>
<p>
  Ahora, usando <em>map, filter</em> y <em>reduce</em> una después de la otra...
</p>
<!-- prettier-ignore -->
<pre><code class="language-javascript">
        let nombreMásLargo = estudiantes
          .filter((estudiante) => {return estudiante.año === 3})
          .map((estudiante) => {return estudiante.nombre})
          .reduce((acumulador, nombre) => {
            if(nombre.length > acumulador.length){
              return nombre
            } else {
              return acumulador
            }
          }, "");
        console.log(nombreMásLargo);// "Lucía"
      </code></pre>
<p><em>Biutiful</em>.</p>
<h2>Cuadro comparativo</h2>
<p>A continuación un cuadro comparativo entre las 3 funciones:</p>
<table class="data-table">
  <thead>
    <tr>
      <th>Función</th>
      <th>Uso</th>
      <th>Parámetros</th>
      <th>Resultado</th>
      <th>Parámetros del callback</th>
      <th>Resultado del callback</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Map</td>
      <td>Hacer una operación a cada elemento de un array</td>
      <td>Una función <strong>callback</strong></td>
      <td>Un array con todos los resultados de la operación a cada elemento</td>
      <td>Un elemento del array</td>
      <td>El resultado de hacer la operación deseada al elemento del array</td>
    </tr>
    <tr>
      <td>Filter</td>
      <td>
        Obtener aquellos elementos del array que cumplen con alguna condición
      </td>
      <td>Una función <strong>callback</strong></td>
      <td>Un array con los elementos que cumplen la condición</td>
      <td>Un elemento del array</td>
      <td>
        <code class="language-javascript">true</code> o
        <code class="language-javascript">false</code>
      </td>
    </tr>
    <tr>
      <td>Reduce</td>
      <td>Reducir un array a un único valor</td>
      <td>
        Una función <strong>callback</strong> y un valor inicial del acumulador
      </td>
      <td>Un único valor</td>
      <td>El acumulador y un elemento del array</td>
      <td>El valor del acumulador luego de procesar el elemento</td>
    </tr>
  </tbody>
</table>
<h2>Antes de que se vayan...</h2>
<p>
  ¿Y que pása si necesito los índices? ¿Y si en algún paso intermedio de
  encadenar funciones de alto orden necesito propiedades de todo el array, como
  su longitud?
</p>
<p>
  Bueno, yo les di información incompleta. En todos los casos, los
  <strong>callback</strong>, luego del parámetro del elemento (el primero para
  map y filter, el segundo para reduce) pueden tomar
  <strong>opcionalmente</strong> 2 parámetros más: el índice del elemento y el
  array completo.
</p>
<p>
  Supongamos que de nuestra lista de estudiantes queremos armar dos grupos, y
  los vamos a armar dependiendo de la posición en la lista: pares por un lado,
  impares por el otro. Usando <em>filter</em>...
</p>
<!-- prettier-ignore -->
<pre><code class="language-javascript">
        let grupoPar = estudiantes.filter((estudiante, i) => {return i % 2 === 0});
        // grupoPar = [{ nombre: "Ivo", apellido: "Degange", edad: 15, año: 3 }, { nombre: "Lucía", apellido: "Parrondo", edad: 15, año: 3 }, { nombre: "Darío", apellido: "Mischener", edad: 16, año: 4 }]
        let grupoImpar = estudiantes.filter((estudiante, i) => {return i % 2 === 1});
        // grupoImpar = [{ nombre: "Carolina", apellido: "Kupcevich", edad: 16, año: 4 }, { nombre: "Paula", apellido: "Sapochnik", edad: 18, año: 5 }, { nombre: "Julián", apellido: "Zylber", edad: 17, año: 5 }]
      </code></pre>
<p>
  Basta para mí basta para todos. ¡Usénlas de ahora en más! Si las saben, chau
  for y forEach.
</p>
