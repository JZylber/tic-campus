---
import CodeBlock from "../../../../components/articles/code-block/CodeBlock.astro";
import InlineCodeBlock from "../../../../components/articles/code-block/InlineCodeBlock.astro";

export const partial = true;
---

<h2>Consigna Base</h2>
<p>
  La avenida avellaneda en flores es un lugar icónico de la ciudad de buenos
  aires para ir a comprar ropa. Se consigue ropa a muy bajo costo, especialmente
  si uno compra en cantidad. En general, a partir de cierta número de prendas,
  se accede a un precio mayorista, es decir, sale menos la unidad, resultando en
  un descuento importante.
</p>
<p>Nos dejaron a cargo de un local, y tenemos la siguiente lista de precios:</p>
<table class="data-table">
  <thead>
    <tr>
      <th>Producto</th>
      <th>Precio minorista</th>
      <th>Precio mayorista</th>
      <th>Min. unidades p/precio mayorista</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>pantalon</td>
      <td>1500p</td>
      <td>1000p</td>
      <td>3</td>
    </tr>
    <tr>
      <td>remera</td>
      <td>800p</td>
      <td>600p</td>
      <td>6</td>
    </tr>
    <tr>
      <td>medias</td>
      <td>300p</td>
      <td>200p</td>
      <td>12</td>
    </tr>
    <tr>
      <td>calzoncillo</td>
      <td>500p</td>
      <td>350p</td>
      <td>12</td>
    </tr>
    <tr>
      <td>bombacha</td>
      <td>500p</td>
      <td>350p</td>
      <td>12</td>
    </tr>
  </tbody>
</table>
<p>
  Recuerden que "p" es <em>Patacones</em> y no pesos. Demos un ejemplo. Supongamos
  que compro remeras. Si compro 3 remeras, tengo que usar el precio minorista, ya
  que el mayorista es a partir de 6 prendas, osea, 3x800p = 2400p. En cambio, si
  compro 9, como supera el mínimo para precio mayorista, la cuenta sería 9x600p =
  5400p.
</p>
<p>
  Como encargados del local, tenemos un programa que ingresando la prenda y
  cantidad, nos calcula el total. Sin embargo ¡Se nos traspapeló una función! La
  función <InlineCodeBlock lang="javascript" code="calcularPrecioTotal" /> está siendo
  usada en el programa pero no está declarada en ningún lado. Completar el programa
  creando la función
  <InlineCodeBlock
    lang="javascript"
    code="calcularPrecioTotal(cantidad,precioMinorista,precioMayorista,minUnidadesMayorista)"
  />. Esta toma 4 parámetros:
</p>
<ul>
  <li>cantidad: la cantidad del producto a comprar</li>
  <li>precioMinorista: el precio minorista del producto</li>
  <li>precioMayorista: el precio mayorista del producto</li>
  <li>
    minUnidadesMayorista: el mínimo de unidades para acceder al precio mayorista
  </li>
</ul>
<p>La función debe retornar el precio total de la compra.</p>
<h2>Consigna Manija: Lorem Ipsum</h2>
<p>
  <strong
    >ESTE EJERCICIO ES BASTANTE COMPLICADO CONCEPTUALMENTE: ENTER AT YOUR OWN
    RISK</strong
  >
</p>
<p>
  Lorem ipsum es el texto que se usa habitualmente en diseño gráfico en
  demostraciones de tipografías o de borradores de diseño para probar el diseño
  visual antes de insertar el texto. Es escencialmente un texto largo de prueba,
  y lo podemos hacer tan largo como necesitemos. Vamos a hacer una función
  generadora de lorem ipsum, pero para eso, tenemos que entender el concepto de <strong
    >recursión</strong
  >
</p>
<h3>Recursión</h3>
<p>
  La recursión es el acto de <strong>funciones que se llaman a sí mismas</strong
  >. Es útil para hacer una misma operación muchas veces. Cada vez que la
  función se llama a sí misma, lo hace con una versión más simple del problema,
  y hay un punto en que deja de llamarse: eso se llama <strong>caso base</strong
  >.
</p>
<p>
  Veamos un ejemplo para que se entienda mejor: el factorial. El factorial de un
  número n (escrito como n!) es el producto de todos los números enteros desde n
  hasta 1. Por ejemplo: 5! = 5 × 4 × 3 × 2 × 1 = 120. Esto se puede escribir de
  forma recursiva:
</p>
<CodeBlock
  lang="javascript"
  code={`function factorial(n) {
  if (n === 1) {
    return 1; // caso base
  } else {
    return n * factorial(n - 1); // llamada recursiva
  }
}`}
/>
<p>
  ¿Por qué funciona? Supongamos que queremos hacer el factorial de 3, osea <InlineCodeBlock
    lang="javascript"
    code="factorial(3)"
  />.
</p>
<img
  class="w-full px-6 py-4"
  :src="$store.baseURL.publicURL('/diagrams/factorial.svg')"
  alt="factorial"
/>
<p>Veamos el paso a paso:</p>
<ol>
  <li>factorial(3) = 3 x factorial(2)</li>
  <li>factorial(3) = 3 x 2 x factorial(1)</li>
  <li>factorial(3) = 3 x 2 x 1</li>
</ol>
<p>
  ¡Listo! Ejecutó 3 veces sin colgarse. Resumiendo, en recursión tenemos 2
  etapas: el paso recursivo, que es el que llama de vuelta a la función, y el
  caso base, que es el que corta, o el más chico posible.
</p>
<p>
  Ahora si, lo que tiene que hacer: Usando recursión (no vale ni while, ni for,
  ni forEach, ni map, ni reduce) hacer una función que genere un texto de lorem
  haciendo "Lorem Ipsum" tantas veces como indique el parámetro. Es una función
  que toma un número y devuelva un string con el texto "Lorem Ipsum" repetido
  esa cantidad de veces, terminando con un punto. Por ejemplo:
</p>
<CodeBlock lang="javascript" code={`generarLorem(5)`} />
<p>
  Debería devolver 'Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem
  Ipsum.'
</p>
<p>
  No se olviden del punto final. <strong>Tip:</strong> tiene que ver con el caso
  base.
</p>
