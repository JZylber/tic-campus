---
import CodeBlock from "../../../../../../components/articles/code-block/CodeBlock.astro";

export const partial = true;
---

<p>
  <strong
    >¡NO SE OLVIDEN DE ARMAR EL .gitignore para excluir todo lo que no quieren
    commitear!</strong
  >
  Veo un node_modules pusheado y se llevan la materia automáticamente.
</p>
<p>
  Este TP, obviamente, usa SoqueTIC. Para instalarlo, pueden hacerlo igual que
  cualquier otra librería usando npm:
</p>
<CodeBlock lang="bash" code="npm i soquetic" />
<p>
  Para levantar el frontend hay que usar, como siempre, LiveServer. El archivo
  index.html te permite recorrer los distintos puntos de la consigna.
</p>
<h2>Consigna</h2>
<p>
  La Pokédex es la base de datos de todos los pókemon. Queremos construir una
  tabla que nos deje filtrar por algunos parámetros, además de registar que
  pókemon fuimos capturando. Contamos con la información en el archivo
  pokemon.json.
</p>
<p>
  Armar un programa usando Node JS y SoqueTIC que permita responder a los
  siguientes mensajes:
</p>
<ul>
  <li>
    <em>"pokemon"</em>: Recibe como parámetro un objeto con 2 atributos:
    generation y legendary. Se debe filtrar la lista de pókemon en base a estos
    criterios de la siguiente forma:
    <ul>
      <li>
        <strong>generation</strong>: Siempre es de tipo
        <em>string</em>. Si dice "all", se deben devolver todos los pókemon
        independiente de la generación. Si dice otro valor, se deben devolver
        los pókemon de esa generación.
      </li>
      <li>
        <strong>legendary</strong>: Siempre es de tipo
        <em>boolean</em>. Si es
        <em>false</em>, se deben devolver todos los pókemon que no sean
        legendarios. Si es
        <em>true</em>, se deben devolver todos los pókemon <strong
          >incluyendo los legendarios</strong
        >.
      </li>
    </ul>
  </li>
  <li>
    <em>"capture"</em>: Recibe como parámetro un objeto con 2 atributos: id y
    captured. Se debe modificar el pókemon con el id recibido para que su
    atributo Captured sea el valor recibido (ya es
    <em>boolean</em>).
    <strong>Actualizar el archivo pokemon.json para reflejar este cambio</strong
    >.
  </li>
</ul>
<p>
  Haciendo este punto, obtienen un 7. Si quieren el 10, tienen que hacer la
  consigna manija
</p>
<h2>Consigna manija</h2>
<p>Haciendo esta consigna llegan al 10.</p>
<p>
  Ahora nos interesa filtrar por tipos. Al objeto que recibe el evento
  <em>"pokemon"</em>, se le suma un atributo, <em>"types"</em>, que contiene una
  lista de tipos. La lista de pokémon resultantes del evento debe contener
  pokémon cuyo tipo y subtipo están dentro de esta lista, es decir, se deben
  excluir pokémon cuyo tipo principal o subtipo no estén en la lista recibida
  por parámetros.
</p>
<p>
  <strong>No se debe romper la funcionalidad de la consigna anterior</strong>
</p>
<p><strong>TIPS:</strong></p>
<ul>
  <li>
    Para ver si un elemento está en una lista, ¿Por qué no buscan a Wally?
  </li>
  <li>Estén atentos a que no todos los pokémon tienen subtipo</li>
  <li>No se olviden de no romper la consigna base</li>
</ul>
