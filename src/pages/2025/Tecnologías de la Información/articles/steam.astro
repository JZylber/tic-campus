---
import InlineCodeBlock from "../../../../components/articles/code-block/InlineCodeBlock.astro";

export const partial = true;
---

<h2>Consigna</h2>
<p>
  Los precios en steam están dolarizados. ¿Cuánto sale un juego en realidad?
</p>
<p>
  El precio en pesos de un juego está determinado por el dólar tarjeta, que se
  calcula de la siguiente forma:
</p>
<ul>
  <li>
    Su precio en dólares multiplicado por el dólar oficial (para convertir a
    pesos)
  </li>
  <li>
    Un recargo del 30% por el impuesto a las ganancias (sobre el valor en pesos
    a dólar oficial)
  </li>
  <li>
    Un recargo del 21% por IVA (sobre el valor en pesos a dólar oficial, sin
    contar el impuesto a las ganancias)
  </li>
</ul>
<p>
  Hacer un programa en javascript que calcule el precio en pesos de un juego.
  Para eso:
</p>
<ol>
  <li><strong>CLONAR</strong> el repositorio que les doy</li>
  <li>
    Crear un archivo html y otro archivo js. Linkear el archivo js en el html
    usando el tag <InlineCodeBlock
      code="<script src='nombre_de_archivo.js'></script>"
      lang="html"
    />.
  </li>
  <li>
    Pedir ingresar el precio en dólares de un juego mediante
    <InlineCodeBlock code="prompt()" lang="javascript" /> y guardarlo en una variable.
  </li>
  <li>
    Calcular el precio en pesos siguiendo las reglas descritas anteriormente y
    guardar dicho valor en otra variable.
  </li>
  <li>Imprimir por consola ese valor</li>
  <li>¡Stage (+), commit y push!</li>
</ol>
<h2>Consigna manija</h2>
<h3>Clamping</h3>
<p>
  En videojuegos, hay stats (valores para habilidades) que suben o bajan por
  distintos factores. Para evitar que excedan valores deseados, ya sea números
  muy grandes o muy chicos, se <em>clampean</em> esos valores, es decir, se les pone
  un piso y un techo. Si superan esos valores, se los restringe a esos límites. Por
  ejemplo, supongamos que quiero que un determinado valor no sea mayor a 60 y no
  sea menor a 0. Para valores más grandes como 70 se los deja en 60, para valores
  más chicos como -10 se los deja en 0, y para valores en el rango como 38 se los
  deja en 38.
</p>
<p>¿Cómo se logra esto? Bueno, hay basicamente dos formas:</p>
<ul>
  <li>
    Para que un número no se pase para arriba, puedo elegir el
    <strong>mínimo</strong> entre el techo y mi valor. Si el valor es más chico que
    el techo, va a quedar el valor ya que es más chico, osea, es el mínimo entre
    los dos valores. Siguiendo el ejemplo de 60 como límite superior, el mínimo entre
    38 y 60 es 38. Si en cambio, el valor es más grande, el valor que va a quedar
    es el techo. Con el mismo ejemplo, el mínimo entre 65 y 60 es 60.
  </li>
  <li>
    Para que un número no se pase para abajo, puedo elegir el
    <strong>máximo</strong> entre el piso y mi valor. Si el valor es más grande que
    el piso, va a quedar el valor ya que es más grande, osea, es el máximo entre
    los dos valores. Siguiendo el ejemplo de 0 como límite inferior, el máximo entre
    38 y 0 es 38. Si en cambio, el valor es más chico, el valor que va a quedar es
    el piso. Con el mismo ejemplo, el máximo entre -16 y 0 es 0.
  </li>
</ul>
<p>Escribir código para <em>clampear</em> un número entre 0 y 60.</p>
<ol>
  <li>
    Crear otro archivo html y otro archivo js. Linkear el archivo js en el html
  </li>
  <li>
    Ingresar mediante <InlineCodeBlock code="prompt()" lang="javascript" /> el número
    a clampear y guardar en una variable
  </li>
  <li>Googleen como hacer máximos y mínimos en javascript</li>
  <li>Clampear el número entre 0 y 60. Imprimir por consola el resultado</li>
  <li>
    Verificar que el clamping funciona probando que números más chicos de 0
    quedan en 0, números entre 0 y 60 quedan como están, y números mayores a 60
    quedan en 60
  </li>
</ol>
<h2>Entrega</h2>
<p>
  Para esta y todas las actividades a futuro, se entrega commiteando y
  pusheando.
</p>
