---
import ImportantBox from "../../../../../../components/articles/alertbox/ImportantBox.astro";
import CodeBlock from "../../../../../../components/articles/code-block/CodeBlock.astro";
import InlineCodeBlock from "../../../../../../components/articles/code-block/InlineCodeBlock.astro";

export const partial = true;
---

<h2>Comandos Básicos</h2>
<p>
  A continuación, algunos comandos de terminal que son útiles para hacer esta
  actividad. Pueden ver otros comandos googleando o leyendo la
  <a href="https://cheatsheets-nachovigilante.vercel.app/">cheatsheet</a>.
</p>
<table>
  <thead>
    <tr>
      <th>Comando</th>
      <th>Descripción</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>ls</td>
      <td>Lista los archivos y carpetas del directorio actual.</td>
    </tr>
    <tr>
      <td>cd</td>
      <td>Permite cambiar de directorio.</td>
    </tr>
    <tr>
      <td>pwd</td>
      <td>Muestra la ruta del directorio actual.</td>
    </tr>
    <tr>
      <td>mkdir</td>
      <td>Crea un directorio.</td>
    </tr>
    <tr>
      <td>New-Item</td>
      <td>Crea un archivo.</td>
    </tr>
  </tbody>
</table>
<h2>Consigna Base</h2>
<p>
  La idea de esta actividad es hacerla <strong>100% con la terminal</strong>, es
  decir, sin usar el explorador de archivos
</p>
<ol>
  <li>Abrir una instancia de Powershell.</li>
  <li>Moverse a la carpeta Documentos (disco C).</li>
  <li>Crear una carpeta <em>"Terminal"</em>.</li>
  <li>Crear un archivo <em>"terminal.html"</em>.</li>
</ol>
<p>
  Ahora si, pueden dejar de usar la terminal. Abrir el archivo
  <em>"terminal.html"</em> desde visual studio code y armar el esqueleto básico de
  un archivo html. Ponerle un título (<InlineCodeBlock
    code="<h1>"
    lang="html"
  />). Verificar que anda abriendo ese archivo en un browser (Chrome, Firefox,
  etc).
</p>
<h2>Consigna Manija</h2>
<p>
  Desde la terminal se puede hacer todo lo que uno puede hacer con clicks y más.
  A mi personalmente me resulta muy conveniente usar git desde la terminal. Les
  propongo la siguiente actividad para que prueben hacer esto.
</p>
<p>
  <strong
    >Los comandos mencionados se encuentran en la
    <a href="https://cheatsheets-nachovigilante.vercel.app/">cheatsheet</a
    >.</strong
  >
</p>
<p>
  Localicen su repositorio de proyecto (si todavía no lo crearon, creenlo) y
  asegurense que tenga al menos algún archivo. Recordamos que git funciona a
  base de commits, que son como puntos de recuperación. Uno agrega/saca cambios
  a un commit, realiza commits y pushea/pullea commits contra un repositorio en
  la nube.
</p>
<ol>
  <li>Abrir una shell y moverse a Documentos del disco C.</li>
  <li>
    Clonar el repositorio usando <InlineCodeBlock
      lang="bash"
      code="git clone"
    />.
  </li>
  <li>Modificar/Agregar algún archivo dentro del repositorio.</li>
  <li>
    Agregar dichos cambios a un futuro commit usando
    <InlineCodeBlock lang="bash" code="git add" />. <strong>TIP:</strong> Si les
    tira que no es un repositorio, revisen bien en que carpeta está situada la shell.
  </li>
  <li>
    Completar un commit usando <InlineCodeBlock
      lang="bash"
      code="git commit"
    />.
    <strong>TIP:</strong> ¡No se olviden del mensaje! Es obligatorio, y no podemos
    realizar commits sin mensajes.
  </li>
  <li>
    Pushear el commit usando <InlineCodeBlock lang="bash" code="git push" />.
    Entren a github en el browser y vean que esto se haya hecho correctamente.
    Deberían ver los cambios hechos.
  </li>
</ol>
<ImportantBox warning="Lu/Shulian, ¡No puedo commitear!">
  <p>
    ¿Se acuerdan el error que les tira cada tanto que no los deja commitear? Eso
    es porque hay que setear un usuario y mail en git. Para eso, pueden correr
    los siguientes comandos:
  </p>
  <CodeBlock
    lang="bash"
    code={`git config --global user.name "Su Nombre"
git config --global user.email "Mail de Github"`}
  />
</ImportantBox>
