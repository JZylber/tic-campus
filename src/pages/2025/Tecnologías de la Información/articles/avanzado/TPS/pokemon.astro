---
import CodeBlock from "../../../../../../components/articles/code-block/CodeBlock.astro";

export const partial = true;
---

<p>
  Les regalé el <em>.gitignore</em>. ¡Más vale que no vea un node_modules
  pusheado! Se llevan la materia automáticamente.
</p>
<p>
  Este TP, obviamente, usa SoqueTIC. Para instalarlo, pueden hacerlo igual que
  cualquier otra librería usando npm:
</p>
<CodeBlock lang="bash" code="npm i soquetic" />
<p>
  <strong
    >Para levantar el frontend hay que usar, como siempre, LiveServer.
  </strong>
</p>
<h2>Consigna Base</h2>
<p>
  La Pokédex es la base de datos de todos los pókemon. Queremos construir una
  tabla que nos deje filtrar por algunos parámetros. Contamos con la información
  en el archivo pokemon.json.
</p>
<h3>Punto 0</h3>
<p>
  Armar un programa usando Node JS y SoqueTIC que permita responder al mensaje <em
    >"pokémon"</em
  > de tipo <strong>POST</strong>. El evento envía un objeto con la siguiente
  forma:
</p>
<CodeBlock
  lang="javascript"
  code={`{
  types: string[], // lista de tipos del pokémon a buscar
  generation: string, // generación del pokémon a buscar. Puede ser "all" para todas las generaciones o un número del 1 al 7
  legendary: boolean // si es true, se buscan pokémon comunes y legendarios. Si es false, solo no legendarios.
}`}
/>
<p>
  Por ahora, ignoren el parámetro y devuelvan todo el contenido del archivo <em
    >data/pokemon.json</em
  > sin filtrar. A diferencia de casi todos los ejercicios que venimos haciendo,
  <strong>no devuelvan el array directamente</strong>, sino un objeto con la
  clave pokemon cuyo valor es el array. Esto es para que ande el Punto 4.
</p>
<h3>Punto 1 - Legendarios</h3>
<p>
  Modificar la función que responde al evento <em>'pokémon'</em> para filtrar el
  array de pokémon dependiendo del atributo <em>legendary</em> de la información
  enviada por el frontend. En particular, si es true, devolver todos los pokémon
  (legendarios y no legendarios). Si es false, devolver solo los no legendarios.
</p>
<h3>Punto 2 - Generación</h3>
<p>
  Modificar la función que responde al evento <em>'pokémon'</em> para filtrar el
  array de pokémon dependiendo del atributo <em>generation</em> de la información
  enviada por el frontend. En particular, si es "all", devolver todos los pokémon.
  Si es un número del 1 al 7, devolver solo los de esa generación.
</p>
<p>
  Haciendo los puntos 0, 1 y 2 obtienen un 6. Si quieren el 10, tienen que hacer
  las consignas manijas.
</p>
<h2>Consigna manija</h2>
<h3>Punto 3 - Tipo</h3>
<p>Haciendo esta consigna suman 2 puntos.</p>
<p>
  Modificar la función que responde al evento <em>'pokémon'</em> para filtrar el
  array de pokémon dependiendo del atributo <em>types</em> de la información enviada
  por el frontend. Se deben devolver solo los pokémon que tengan
  <strong>alguno</strong> de los tipos indicados (ya sea como tipo o subtipo). Es
  decir, si el tipo o subtipo del pokémon no está en la lista, no debe ser incluido
  en el resultado.
</p>
<h3>Punto 4 - Promedio</h3>
<p>Haciendo esta consigna suman 2 puntos.</p>
<p>
  Modificar la función que responde al evento <em>'pokémon'</em> para que devuelva
  un objeto cuyos atributos sean el promedio de los niveles de los pokémon que cumplen
  con los filtros aplicados en los puntos anteriores. En particular, debe ser el
  promedio de los stats:
</p>
<ul>
  <li>hp</li>
  <li>attack</li>
  <li>defense</li>
  <li>sp_attack</li>
  <li>sp_defense</li>
  <li>speed</li>
</ul>
<p>
  Recapitulando, este objeto representaría el pokémon promedio entre todos
  aquello que cumplen con los filtros aplicados. Se deben sumar los valores de
  cada stat de todos los pokémon que cumplen con los filtros y dividirlos por la
  cantidad de pokémon que cumplen con los filtros.
</p>
<p>El objeto devuelto debe tener la siguiente forma:</p>
<CodeBlock
  lang="javascript"
  code={`{
  hp: number,
  attack: number,
  defense: number,
  sp_attack: number,
  sp_defense: number,
  speed: number
}`}
/>
<p>
  y dentro del objeto a retornar al front, debe ir en el atributo <em
    >'average'</em
  >, es decir, el objeto final a retornar debería tener la forma:
</p>
<CodeBlock
  lang="javascript"
  code={`{
  pokemon: Pokemon[], // array de pokémon que cumplen con los filtros
  average: { // objeto con el promedio de stats de los pokémon que cumplen con los filtros
    hp: number,
    attack: number,
    defense: number,
    sp_attack: number,
    sp_defense: number,
    speed: number
  }
}`}
/>
