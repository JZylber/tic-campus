---
import CodeBlock from "../../../components/articles/code-block/CodeBlock.astro";

export const partial = true;
---

<h2>Introducción</h2>
<p>
  ¡Los yanquis finalmente devuelven el canal! Panamá recupera la soberanía del
  territorio, y ya no hay más bases militares. En particular, el canal pasa a
  manos panameñas.
</p>
<p>
  Los americanos tienen desarrollado un sistema de control y un simulador. Sin
  embargo, los programadores eran tejanos, y como buenos tejanos, no probaron
  nada. Nosotros no podemos dejar uno de los principales motores de nuestra
  economía expuesto a errores inesperados, y por eso, vamos a desarrollar un
  conjunto de tests para verificar que el software legado esté en condiciones
  apropiadas. Además, tenemos planeada una expansión del canal, y es importante
  tener un conjunto de pruebas sólido para probar la expansión.
</p>
<p>
  El sistema de control del canal es complejo. Nuestros compañeros de la empresa
  se adelantaron, y recopilaron información del funcionamiento del programa
  además de entrevistas a sus desarrolladores. Esta información es vital para
  construir el conjunto de tests, y está detallada a continuación.
</p>
<h2>Funcionamiento</h2>
<p>
  Toda esta sección explica el funcionamiento del canal. Pueden probarlo con el
  simulador, <code>canal_diagram.py</code>. A continuación un diagrama de las
  esclusas que vamos a usar para explicar el software.
</p>
<p>
  <img
    src="https://jzylber.github.io/campus-data/img/canal-diagram.png"
    alt="Diagrama del canal"
  />
</p>
<h3>Estado del Canal</h3>
<p>
  El componente principal del sistema de control del canal es el estado. Este es
  un diccionario que cuentan con toda la información de las esclusas en un
  determinado momento. El estado inicial del canal es el siguiente:
</p>
<CodeBlock
  language="python"
  code={`{
    "locks": ["","",""],
    "locks_water_level": ["low","low","low"],
    "queue_upstream": [],
    "queue_downstream": [],
    "gates": [False,False,False,False],
    "direction": "upstream",
    "control": [],
    "open": True
}`}
/>
<p>¿Pero qué es cada cosa?</p>
<ul>
  <li>
    <strong>locks</strong>: Lista de 3 posiciones, una para cada esclusa (0,1,2)
    como están en el diagrama. Si hay algún barco en la esclusa, aparece su
    nombre en la posición correspondiente.
  </li>
  <li>
    <strong>locks_water_level</strong>: Lista de 3 posiciones, una para cada
    esclusa (0,1,2) como están en el diagrama. Representan el nivel del agua en
    dicha esclusa. Hay 4 opciones de nivel, <em>high</em>, <em>low</em>,
    <em>draining</em>, <em>filling</em>.
  </li>
  <li>
    <strong>queue_upstream</strong>: Lista. Contiene los barcos esperando para
    entrar al canal desde el punto más alto, <em>upstream</em>, del canal.
  </li>
  <li>
    <strong>queue_downstream</strong>: Lista. Contiene los barcos esperando para
    entrar al canal desde el punto más bajo, <em>downstream</em>, del canal.
  </li>
  <li>
    <strong>gates</strong>: Lista de 4 posiciones, una para cada compuerta
    (0,1,2,3). La 0 es entre el punto más bajo del canal y la esclusa 1, la 1 es
    entre la esclusa 1 y la 2, la 2 es entre la esclusa 2 y la 3, y la 3 es
    entre la esclusa 3 y el punto más alto del canal. Si la compuerta está
    abierta, el valor es True, si está cerrada, el valor es False.
  </li>
  <li>
    <strong>direction</strong>: Dirección en la que está operando el canal.
    Puede tomar dos valores, <em>upstream</em> y <em>downstream</em>.
  </li>
  <li>
    <strong>control</strong>: Lista de comandos a ser ejecutados por el control.
    Se va a explicar más en la fase I.
  </li>
  <li>
    <strong>open</strong>: Booleano que dice si está abierto o no el canal. Si
    el canal está cerrado, los barcos de las filas rio abajo o rio arriba no
    pueden ingresar al canal.
  </li>
</ul>
<h3>Fase I: Ejecutar comandos de control pendientes</h3>
<p>
  Antes, tenemos que entender que es el control, una de las partes principales
  del estado. El control es una lista de tuplas de la forma
  <code>(&lt;tiempo&gt;, &lt;comando&gt;)</code>, que simulan acciones que
  llevan tiempo, y el programa debe actualizar el estado del canal cuando dichas
  acciones se completan. El <em>tiempo</em> es simplemente un entero que representa
  la cuenta regresiva hasta necesitar ejecutar el comando. En la fase I, se ejecutan
  comandos cuyo tiempo es 0. Al ejecutarlos se eliminan de la lista de control ¿Pero
  que tipos de comandos hay?
</p>
<ol>
  <li>
    <p>
      <strong>Comando move</strong>: Este tiene la forma de
      <code>&quot;move &lt;origen&gt; &lt;destino&gt;&quot;</code>. Este comando
      representa la finalización del movimiento de un barco, y al ejecutarse
      mueve el nombre del barco de <code>&lt;origen&gt;</code> a
      <code>&lt;destino&gt;</code> y cierra (<code>False</code>) la compuerta
      entre origen y destino. Por ejemplo, el comando
      <code>&quot;move qd 0&quot;</code> mueve el barco de la fila río abajo, es
      decir saca el primer elemento de <em>queue_upstream</em> (recuerden que el
      nombre está dado por la dirección a recorrer y no el lugar donde están) y lo
      pone en la esclusa 0.Además, cierra la compuerta 0.
    </p>
  </li>
  <li>
    <p>
      <strong>Comando level</strong>: Este tiene la forma de
      <code>&quot;level &lt;esclusa&gt; &lt;nivel&gt;&quot;</code>. Este comando
      representa la finalización de un cambio de nivel en una esclusa, y al
      ejecutarse cambia el nivel de la esclusa referida al nivel deseado. Por
      ejemplo, el comando <code>&quot;level 1 high&quot;</code> setea el nivel de
      la esclusa 1 en <em>high</em>.
    </p>
  </li>
  <li>
    <p>
      <strong>Comando direction</strong>: Este tiene la forma de
      <code>&quot;direction &lt;abrir&gt; &lt;dirección&gt;&quot;</code>. Este
      comando representa el intento de cambio en la dirección del canal. Cuando
      se ejecuta, primero se chequea si el canal está vacío. Si la respuesta es
      no, se cierra el canal (<code
        >&lt;canal-state&gt;[&quot;open&quot;] = False</code
      >) a la espera de que los barcos restantes despejen el canal. En este
      caso, se agrega un comando de 1 minuto para ejecución el próximo ciclo y
      que vuelva a chequear si el canal está vacío, de la forma
      <code>(1,&quot;direction &lt;abrir&gt; &lt;dirección&gt;&quot;)</code>. Si
      en cambio el canal está vacío, se cambia la dirección a la deseada, y si
      abrir es igual a &quot;open&quot;, se reabre el canal (<code
        >&lt;canal-state&gt;[&quot;open&quot;] = True</code
      >)
    </p>
  </li>
</ol>
<h3>Fase II: Mover barcos a través de las esclusas</h3>
<p>
  Cuando ya hay barcos en las esclusas, hay toda una lógica para ver si un barco
  puede avanzar de esclusa o salir del canal, o hay que modificar los niveles de
  las esclusas.
</p>
<p>
  Si la dirección es <em>upstream</em>, y el barco se encuentra en una esclusa
  con nivel bajo (<em>low</em>), se debe elevar el nivel del agua en la esclusa
  en la que está presente. Esto se hace cambiando el nivel de agua a
  <em>filling</em> y agregar el comando de elevar el nivel al control, que dura 10
  minutos. El comando entonces sería
  <code>(10, level &lt;esclusa&gt; high)</code>. Para dirección
  <em>downstream</em>, ocurre lo mismo cuando está en una esclusa de nivel alto
  (<em>high</em>). Se debe bajar el nivel del agua, y esto se hace cambiando el
  nivel a <em>draining</em> y agregar el comando de bajar el nivel al control, que
  sería de la forma <code>(10, level &lt;esclusa&gt; low)</code>.
</p>
<p>
  Cuando el barco está listo para pasar a la siguiente esclusa, es decir, en una
  esclusa de nivel alto (<em>high</em>) cuando la dirección es
  <em>upstream</em> o de nivel bajo (<em>low</em>) cuando la dirección es
  <em>downstream</em>, se chequean las siguientes cosas:
</p>
<ol>
  <li>
    Si hay un barco en la siguiente esclusa, no se hace nada (al menos en
    términos de este barco, el otro barco puede realizar acciones como subir el
    nivel de su esclusa).
  </li>
  <li>
    Si el nivel está <em>draining</em> o <em>filling</em> de la siguiente esclusa,
    tampoco puede hacer nada.
  </li>
  <li>
    Si el nivel está alto (<em>high</em>) en el caso de que la dirección sea
    <em>upstream</em>, debemos bajarlo para que el barco pueda cambiar de
    esclusa. Esto es setear el nivel de la siguiente esclusa en
    <em>draining</em> y agregar el comando correspondiente, es decir
    <code>(10, level &lt;esclusa-a-moverse&gt; low)</code>. Si el nivel está
    bajo (<em>low</em>) en el caso de que la dirección sea <em>downstream</em>,
    debemos subrilo para que el barco pueda cambiar de esclusa. Esto es setear
    el nivel de la siguiente esclusa en <em>filling</em> y agregar el comando correspondiente,
    es decir
    <code>(10, level &lt;esclusa-a-moverse&gt; high)</code>.
  </li>
</ol>
<p>
  Si el nivel está alto (<em>high</em>) en la esclusa menor, bajo (<em>low</em>)
  en la esclusa superior, y no hay barcos en la esclusa a la que quiere moverse
  (dependiendo la dirección del canal), el barco <strong>PUEDE</strong> avanzar a
  la siguiente esclusa. Cuando estas condiciones están dadas, ocurren las siguientes
  cosas en el estado:
</p>
<ol>
  <li>
    Se abre la compuerta correspondiente (<code>True</code>) entre la esclusa
    actual y la esclusa siguiente o salida del canal
  </li>
  <li>
    Se agrega al control el comando para iniciar la salida de esclusa, que dura
    2 minutos. Es decir, se agrega de la forma
    <code>(2, &quot;move &lt;origen&gt; &lt;destino&gt;&quot;)</code>
  </li>
</ol>
<p>
  En el caso de querer salir del canal, esclusa 0 si es <em>downstream</em>,
  esclusa 2 si es <em>upstream</em>, alcanza solo con que el nivel de la esclusa
  actual sea el correcto: <em>low</em> para salir del canal por su extremo río abajo
  y <em>high</em> para salir del canal por su extremo río arriba. Para salir, es
  simplemente un caso particular de la salida descrita anteriormente. Se abre la
  compuerta correspondiente, y se agrega el comando de salida al control: <code
    >(2, &quot;move 2 u&quot;)</code
  > cuando la dirección es
  <em>upstream</em>, <code>(2, &quot;move 0 d&quot;)</code> cuando la dirección es
  <em>downstream</em>.
</p>
<p>
  Además, los barcos no pueden retroceder, es decir, moverse en una dirección
  opuesta a la dirección en la que está funcionando el canal actualmente.
</p>
<h3>Fase III: Mover barcos al canal desde las filas</h3>
<p>
  Finalmente, el programa ve si hay barcos que quieren entrar al canal.
  Obviamente, tiene que estar el canal abierto. Si la dirección es
  <em>upstream</em>, debo chequear si hay barcos en la fila,
  <em>queue_downstream</em> (<em>downstream</em> porque ingresan desde río abajo).
  En caso de que haya:
</p>
<ul>
  <li>Si la esclusa 0 está ocupada por un barco no hago nada.</li>
  <li>
    Si la esclusa 0 está <em>draining</em> o <em>filling</em> tampoco hago nada.
  </li>
  <li>
    Si la esclusa 0 está <em>high</em> debo bajar su nivel a <em>low</em>. Esto
    se hace igual que con las esclusas, setear el nivel a <em>draining</em> y agregar
    el comando <code>(10, level 0 low)</code>.
  </li>
  <li>
    Si la esclusa está <em>low</em>, puedo entrar al canal. Esto se hace
    abriendo la compuerta 0 y agregando el comando correspondiente,
    <code>(2, &quot;move qd 0&quot;)</code>.
  </li>
</ul>
<p>
  En el caso de dirección <em>downstream</em>, es muy parecido. Si hay barcos en
  la fila, <em>queue_upstream</em> (<em>upstream</em> porque ingresan desde río arriba):
</p>
<ul>
  <li>Si la esclusa 2 está ocupada por un barco no hago nada.</li>
  <li>
    Si la esclusa 2 está <em>draining</em> o <em>filling</em> tampoco hago nada.
  </li>
  <li>
    Si la esclusa 2 está <em>low</em> debo subir su nivel a <em>high</em>. Esto
    se hace igual que con las esclusas, setear el nivel a <em>filling</em> y agregar
    el comando <code>(10, level 2 high)</code>.
  </li>
  <li>
    Si la esclusa está <em>high</em>, puedo entrar al canal. Esto se hace
    abriendo la compuerta 3 y agregando el comando correspondiente,
    <code>(2, &quot;move qu 2&quot;)</code>.
  </li>
</ul>
<h2>Entrevista a empleados</h2>
<p>
  Para saber más sobre el programa que estamos recibiendo, la empresa le hizo
  entrevistas a los empleados salientes. En particular, el siguiente fragmento
  trata sobre las dificultades que tuvieron al programar el sistema.
</p>
<p>
  <em
    >Interviewer: What issues did you run into when developing the canal control
    system?</em
  >
</p>
<p>
  <em
    >Engineer: Well, y&#39;know, when we were developin&#39; the software for
    the canal control system, we ran into a good number of tricky issues. First
    off, makin&#39; the control program handle movin&#39; boats out of the canal
    was a real challenge. We had to design algorithms that could precisely
    calculate the timin&#39; and coordination needed, and gettin&#39; those
    calculations just right was no easy task.</em
  >
</p>
<p>
  <em
    >Another big issue was gettin&#39; the control program to work in both
    directions. The system had to be equally efficient whether boats were
    enterin&#39; or exitin&#39;, which meant we had to write some pretty complex
    code to ensure smooth operations no matter the direction of travel.</em
  >
</p>
<p>
  <em
    >And when it came to havin&#39; multiple boats in the canal at the same
    time, well, that was a whole &#39;nother can of worms. The software had to
    manage multiple instances of the control process, prioritizin&#39; and
    synchronizin&#39; the movements to avoid collisions and ensure smooth
    traffic flow. Debuggin&#39; and testin&#39; those concurrent processes was
    particularly tough, and it took a lotta time and effort to get it right.</em
  >
</p>
<h2>Librerías</h2>
<p>
  Para hacer este tp, se necesitan esencialmente 2 librerías: pytest para los
  tests, y pygame para los diagramas. Esto se hace con:
</p>
<pre><code class="language-bash">pip install --user pytest
pip install --user pygame
</code></pre>
<h2>Simulador</h2>
<p>
  Para correr el simulador y ver interactivamente como funciona el canal, deben
  tener instalada la librería <code>pygame</code> y correr el archivo
  <code>canal_diagram.py</code>. ¿Qué es interactivo en el diagrama?
</p>
<ul>
  <li>El reloj, al hacer click avanza un minuto.</li>
  <li>Los <code>+</code> suman un barco a la fila del lado en que están.</li>
  <li>Las flechas a ambos lados invierten la dirección del canal.</li>
  <li>
    El botón <code>DEBUG</code> permite ver <strong>parcialmente</strong> el estado,
    en particular los barcos en las esclusas, los niveles de agua, las compuertas,
    y el control. Las filas, la dirección y si está abierto o no se ve claramente
    en pantalla, así que no se incluyó en las características que se ven en el debug.
  </li>
</ul>
<h2>Consigna</h2>
<p>
  Construir un conjunto de tests para la función
  <code>move_through_locks</code> que se encarga de la
  <strong>fase II (SOLO FASE II NO ME CHILLEN TANTO)</strong> del programa de control.
  La función <code>move_through_locks(canal_state)</code> toma el estado del canal
  y ejecuta sobre todos los barcos presentes en el canal la fase II. La función no
  retorna nada pero recuerden que al tomar un diccionario, este se pasa por <em
    >referencia</em
  >.
</p>
<p><strong>Los tests deben estar en un archivo aparte.</strong></p>
<p>
  Deben tener en cuenta no sólo lo descrito en la sección de funcionamiento,
  sino además hacer pruebas basados en los puntos difíciles del programa que
  marcó el ingeniero entrevistado.
</p>
<p>
  Además, otro miembro de nuestro equipo creó un copia del programa de control
  con algunos <em>bugs</em> intencionales, para probar nuestros tests. Este archivo
  es <code>canal_buggeado.py</code>. Nuestro conjunto de tests debe ser capaz de
  detectar la falla.
</p>
<h2>Archivos</h2>
<p>El tp cuenta con los siguientes archivos:</p>
<ul>
  <li>
    carpeta <em>assets</em>: contiene todas las imágenes para correr el
    simulador.
  </li>
  <li><em>canal.py</em>: Funciones que ejecutan la lógica del canal.</li>
  <li><em>canal_diagram.py</em>: Interfaz gráfica para correr el simulador.</li>
  <li>
    <em>canal_buggeado.py</em>: Funciones que ejecutan la lógica del canal, pero
    con bugs.
  </li>
</ul>
<h2>Rúbrica de Evaluación</h2>
<p>
  La el trabajo práctico va a ser evaluado con la rúbrica que está a
  continuación.
</p>
<table>
  <thead>
    <tr>
      <th></th>
      <th>Satisfactorio</th>
      <th>Mejorable</th>
      <th>Pendiente</th>
      <th>Comentario</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Fase II</td>
      <td>
        Los tests tienen en cuenta todos los casos descritos en la fase II (2
        puntos)
      </td>
      <td>
        Varios de los casos descritos en la fase II no están siendo tenidos en
        cuenta (1 punto)
      </td>
      <td>
        No se tienen en cuenta los casos descritos en la fase II (0 puntos)
      </td>
      <td></td>
    </tr>
    <tr>
      <td>Entrevista</td>
      <td>
        Existen tests que prueban las dificultades descritas por el ingeniero (2
        puntos)
      </td>
      <td>
        Hay algunos tests que prueban las dificultades descritas por el
        ingeniero (1 punto)
      </td>
      <td>
        No hay tests que prueban las dificultades descritas por el ingeniero (0
        puntos)
      </td>
      <td></td>
    </tr>
    <tr>
      <td>Debugging</td>
      <td>Los tests permiten discernir el programa buggeado (1 punto)</td>
      <td>
        Los tests muestran errores, pero no dan ninguna pista por sobre donde
        está el error (0,5 puntos)
      </td>
      <td>El programa buggeado pasa todos los tests (0 puntos)</td>
      <td></td>
    </tr>
    <tr>
      <td>Relevancia</td>
      <td>
        Los tests prueban la funcionalidad específica de la función (1 punto)
      </td>
      <td>
        Muchos tests prueban cosas no relevantes a la función (0,5 puntos)
      </td>
      <td>
        Casi ningún test prueba la funcionalidad específica de la función (0
        puntos)
      </td>
      <td></td>
    </tr>
    <tr>
      <td>Organización</td>
      <td>Los tests están correctamente separados por casos (1 punto)</td>
      <td>Muchos tests prueban más de un caso en un mismo test (0,5 puntos)</td>
      <td>
        Hay un único/unos pocos megatests que hacen todas las prueba (0 puntos)
      </td>
      <td></td>
    </tr>
    <tr>
      <td>Cobertura</td>
      <td>Los tests comparan todo el estado del canal (1 punto)</td>
      <td>Los tests comparan solo parte del estado del canal (0,5 puntos)</td>
      <td>Los tests no comparan el estado del canal (0 puntos)</td>
      <td></td>
    </tr>
    <tr>
      <td>Funcionalidad</td>
      <td>Los tests andan correctamente (1 punto)</td>
      <td>
        Los tests andan, pero muchos están escritos de forma muy confusa o hacen
        cosas innecesarias (0,5 puntos)
      </td>
      <td>
        Los tests no andan, y fallan por problemas del test y no por la función
        (0 puntos)
      </td>
      <td></td>
    </tr>
    <tr>
      <td>Nombres</td>
      <td>
        Los tests tienen nombres apropiados a la situación que evalúan (0,5
        puntos)
      </td>
      <td>Muchos tests tienen nombres poco descriptivos (0,25 puntos)</td>
      <td>
        La mayoría de los tests tiene nombres no relevantes como una enumeración
        (0 puntos)
      </td>
      <td></td>
    </tr>
    <tr>
      <td>Superposición</td>
      <td>
        Los tests evalúan situaciones con lo mínimo indispensable para probar
        cada caso (0,5 puntos)
      </td>
      <td>
        En muchos casos los tests evalúan de forma innecesaria otros casos o
        muchos tests repiten los mismos casos (0,25 puntos)
      </td>
      <td>
        La gran mayoría de los tests prueba cosas que exceden al caso a testear
        o es la misma prueba repetida muchas veces (0 puntos)
      </td>
      <td></td>
    </tr>
  </tbody>
</table>
