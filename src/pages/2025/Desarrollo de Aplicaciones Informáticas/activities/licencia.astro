---
import CodeBlock from "../../../../components/articles/code-block/CodeBlock.astro";
import InlineCodeBlock from "../../../../components/articles/code-block/InlineCodeBlock.astro";

export const partial = true;
---

<h2>Introducción</h2>
<p>
  Muchos de ustedes van a sacar la licencia este año. ¿Saben los lugares para
  hacer los distintos trámites? Para eso, el gobierno de la ciudad nos pidió que
  hagamos un boceto de aplicación que permita consultar por sedes en base a
  barrio o en base a la actividad, y que registre las impresiones (vistas) de
  cada sede. El programa fue terminado, pero se le pidió a <em>Chano</em> que lo
  lleve, chocó, y ¡Perdimos algunas funciones! Ahora queda arreglar el programa con
  las funciones faltantes.
</p>
<h2>Explicación del programa</h2>
<ol>
  <li>
    Se toma un archivo csv con la información de las sedes (<InlineCodeBlock
      lang="python"
      code="cargar_csv(nombreArchivo: str)"
    />)
  </li>
  <li>
    Con los datos, se construye una lista de sedes, donde cada sede es un
    diccionario:
    <CodeBlock
      lang="python"
      code={`Sede = {
        'nombre': str,
        'actividad': str,
        'direccion': str,
        'barrio': str,
        'impresiones': int
      }`}
    />
    <InlineCodeBlock lang="python" code="impresiones" /> no se incluye, solo aparece
    si al menos alguien averigua por dicha sede.
  </li>
  <li>
    Se construyen otros 2 diccionarios a modo de índice:
    <ul>
      <li>
        <InlineCodeBlock
          lang="python"
          code="sedes_por_barrio(sedes : list[Sede])"
        />: Toma la lista de sedes, y construye un diccionario con pares <InlineCodeBlock
          lang="python"
          code="{'barrio': list[Sede]}"
        />. Las claves son los barrios y los valores son listas de sedes.
      </li>
      <li>
        <InlineCodeBlock
          lang="python"
          code="sedes_por_actividad(sedes : list[Sede])"
        />: Toma la lista de sedes, y construye un diccionario con pares <InlineCodeBlock
          lang="python"
          code="{'actividad': list[Sede]}"
        />. Las claves son las actividades y los valores son listas de sedes.
      </li>
    </ul>
  </li>
  <li>
    Se le pide al usuario que ingrese una opcion, entre elegir por barrio, por
    actividad, o terminar el programa
  </li>
  <li>
    En caso de que se elija barrio o actividad, se llama a la función
    <InlineCodeBlock
      lang="python"
      code="seleccionar_desde_opciones(opciones : dict[str, list[Sede]])"
    />. que permite seleccionar una sede desde alguno de los diccionarios índice
    (<InlineCodeBlock lang="python" code="por_barrio" /> o
    <InlineCodeBlock lang="python" code="por_actividad" />)
  </li>
  <li>Se muestra la información de la sede y se marca la impresión/vista</li>
  <li>
    Al finalizar el programa, se muestran los nombres de las sedes y sus
    impresiones/vistas.
  </li>
</ol>
<h2>Consigna</h2>
<p>Reconstruir el programa creando las funciones perdidas:</p>
<ul>
  <li>
    <InlineCodeBlock
      lang="python"
      code="sedes_por_barrio(sedes : list[Sede])"
    />: Toma la lista de sedes, y construye un diccionario con pares <InlineCodeBlock
      lang="python"
      code="{'barrio': list[Sede]}"
    />. Las claves son los barrios y los valores son listas de sedes.
  </li>
  <li>
    <InlineCodeBlock
      lang="python"
      code="sedes_por_actividad(sedes : list[Sede])"
    />: Toma la lista de sedes, y construye un diccionario con pares <InlineCodeBlock
      lang="python"
      code="{'actividad': list[Sede]}"
    />. Las claves son las actividades y los valores son listas de sedes.
  </li>
  <li>
    <InlineCodeBlock lang="python" code="sedes_por_actividad(sede : Sede)" />:
    Toma una sede y marca que alguien realizó una impresión/vista. Recuerden que
    las sedes no tienen la clave
    <InlineCodeBlock lang="python" code="impresiones" />: si nadie consultó por
    ella hasta ahora.
  </li>
</ul>
<h2>Extra</h2>
<ol>
  <li>
    <InlineCodeBlock
      lang="python"
      code="sedes_por_barrio(sedes : list[Sede])"
    />: y <InlineCodeBlock
      lang="python"
      code="sedes_por_actividad(sedes : list[Sede])"
    />: son muy parecidas. ¿Se animan a hacerlas una única función?
  </li>
  <li>
    Opciones 1 y 2 son muy parecidas. Modificar el programa para que no haga
    falta usar <em>if</em> para distinguir entre opciones 1 y 2, osea, en vez de
    tener
    <CodeBlock
      lang="python"
      code={`if opcion == 1:
    # Cosas que hace opcion 1
elif opcion == 2:
    # Cosas que hace opcion 2
elif opcion == 3:
    # Terminar el programa`}
    />
  </li>
  tener algo así:
  <CodeBlock
    lang="python"
    code={`if opcion >= 1 and opcion <= 2:
    # Cosas que hace opcion 1 u opcion 2
elif opcion == 3:
    # Terminar el programa`}
  />
</ol>
